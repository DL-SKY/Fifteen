//---------------------------------------------------------------------------
#include "clFifteen.h"

/*---------------------------------------------------------------------------
==== Класс пятнашек "Fifteen" ====
---------------------------------------------------------------------------*/

//!!!!!!!!!!!!!!!!!!!!!! деструктор и конструкторы !!!!!!!!!!!!!!!!!!!!!!!!!
//---------------------------------------------------------------------------
Fifteen::Fifteen()
{
//Инициализация псевдослучайности
srand( time(NULL) );
//Инициализация матрицы игрового поля "пятнашек"
MatrixNull();
}
//---------------------------------------------------------------------------
Fifteen::~Fifteen()
{
//Удаляем массив
delete iFftn;
}
//---------------------------------------------------------------------------
//!!!!!!!!!!!!!!!!!!!!!!!! SET-функции-члены !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
//---------------------------------------------------------------------------
int Fifteen::Set( int _i, int _j, int _n )
{
//Проверка аргументов
if ( 0 <= _n <= 15 )
	return 101;
if ( 0 <= _i <= 3 )
	return 101;
if ( 0 <= _j <= 3 )
	return 101;

iFftn[_i][_j] = _n;	

//Если нет ошибок, возвращаем 0
return 0;
}
//---------------------------------------------------------------------------
//!!!!!!!!!!!!!!!!!!!!!!!! GET-функции-члены !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
//---------------------------------------------------------------------------
int Fifteen::Get( int _i, int _j )
{
int n = -1;

if ( (0 <= _i <= 3) && (0 <= _j <= 3) )
	n = iFftn[_i][_j];
else
	n = 101;

//Если есть ошибки, возвращаем 101
return n;
}
//---------------------------------------------------------------------------
//!!!!!!!!!!!!!!!!!!!!!!!!!!! Другие функции !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
//---------------------------------------------------------------------------
void Fifteen::MatrixNull()
{
//Проставляем значения -1 всем ячейкам игрового поля
//т.к. значения "1"-"15" будут отображать фишку, а "0" свободную клетку
for ( int i = 0; i < 4; i++ )
	for ( int j = 0; j < 4; j++ )
		iFftn[i][j] = -1;
}
//---------------------------------------------------------------------------
void Fifteen::MatrixRandom()
{
MatrixNull();
int i, j;	//Вспомогательные переменные для индексов матрицы игрового поля
bool bUseN;	//Переменная-флаг использования фишки "n"
i = 0;
j = 0;

for ( int n = 0; n <= 16; n++ )
	{
	//Фишка "n" еще не используется
	bUseN = false;
	//Выбираем случайное место на игровом поле
	i = rand() % 4;
	j = rand() % 4;
		
		//Если заданное случайное место не используется (не занято пустотой или фишкой), то ставим фишку "n" на указанную клетку
		if ( iFftn[i][j] == -1 )
			iFftn[i][j] = n;
		//Если же клетка используется, в цикле ищем первую свободную
		else 
			for ( int I = 0; I < 4; I++ )
				{
				for ( int J = 0; J < 4; J++ )
					{
					//Если место на поле свободно - ставим фишку и проставляем флаг "n-используется"
					if ( iFftn[I][J] == -1 )
						{
						iFftn[I][J] = n;
						bUseN = true;
						break;
						}
					}
				//Если фишка используется, то выходим из цикла поиска первой свободной ячейки
				if (bUseN)
					break;
				}
	}
}
//---------------------------------------------------------------------------
int Fifteen::NewGame()
{
MatrixRandom();

//Если нет ошибок, возвращаем 0
return 0;
}
//---------------------------------------------------------------------------
int Fifteen::EndGame()
{
//Если нет ошибок, возвращаем 0
return 0;
}
//---------------------------------------------------------------------------
int Fifteen::Move( int _i, int _j )
{
//Проверка аргументов
if ( 0 <= _i <= 3 )
	return 101;
if ( 0 <= _j <= 3 )
	return 101;

if ( iFftn[_i][_j] == 0 )
	return 102;
	
//Проверка соседних клеток относительно [_i][_j]
//на наличие пустой клетки.
if ( _i-1 >= 0 )
	{
	if ( iFftn[_i-1][_j] == 0 )
		{
		iFftn[_i-1][_j] = iFftn[_i][_j];
		iFftn[_i][_j] = 0;
		}
	}
if ( _i+1 <= 3 )
	{
	if ( iFftn[_i+1][_j] == 0 )
		{
		iFftn[_i+1][_j] = iFftn[_i][_j];
		iFftn[_i][_j] = 0;
		}
	}
if ( _j-1 >= 0 )
	{
	if ( iFftn[_i][_j-1] == 0 )
		{
		iFftn[_i][_j-1] = iFftn[_i][_j];
		iFftn[_i][_j] = 0;
		}
	}
if ( _j+1 <= 3 )
	{
	if ( iFftn[_i][_j+1] == 0 )
		{
		iFftn[_i][_j+1] = iFftn[_i][_j];
		iFftn[_i][_j] = 0;
		}
	}

//проверка на победу
if ( iFftn[0][0] == 1 )
	if ( iFftn[1][0] == 2 && iFftn[2][0] == 3 && iFftn[3][0] == 4 )
		if ( iFftn[0][1] == 5 && iFftn[1][1] == 6 && iFftn[2][1] == 7 && iFftn[3][1] == 8 )
			if ( iFftn[0][2] == 9 && iFftn[1][2] == 10 && iFftn[2][2] == 11 && iFftn[3][2] == 12 )
				if ( iFftn[0][3] == 13 && iFftn[1][3] == 14 && iFftn[2][3] == 15 && iFftn[3][3] == 0 )
					return 100;
	
//Если нет ошибок и нет победы, возвращаем 0
return 0;
}
//---------------------------------------------------------------------------

